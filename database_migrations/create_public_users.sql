-- Create a lightweight public.users table used for app authorization
-- It gates access by email presence and allows self-service signup.

create table if not exists public.users (
  id bigint generated by default as identity primary key,
  email text not null unique,
  created_at timestamp with time zone default now()
);

-- Enable RLS and allow users to read/insert/update their own email row
alter table public.users enable row level security;

-- Select: only the logged-in user can see their row (by email)
create policy if not exists "Users can read self"
  on public.users for select
  using ((auth.jwt() ->> 'email') = email);

-- Insert: only allow inserting a row for the logged-in email
create policy if not exists "Users can insert self"
  on public.users for insert
  with check ((auth.jwt() ->> 'email') = email);

-- Update (for upsert ON CONFLICT DO UPDATE): only allow updating own row
create policy if not exists "Users can update self"
  on public.users for update
  using ((auth.jwt() ->> 'email') = email)
  with check ((auth.jwt() ->> 'email') = email);
